---
import { Image } from "astro:assets";
import { PRODUCTS } from "@/constants/products";
import Layout from "@/layouts/InfoLayout.astro";
---

<Layout title="geist" description="Geist Design System">
  <main class="mx-auto container max-w-6xl px-4 py-10 sm:px-6 lg:px-8">
    <section
      class="mx-auto max-w-screen-xl flex flex-col items-center justify-center"
    >
      <h2
        class="text-5xl font-bold tracking-tight text-gray-900 dark:text-white"
      >
        productos de soldadura
      </h2>
      <p class="text-xl mt-4 text-gray-500 dark:text-gray-400">
        En el video que estás a punto de ver, se presentan diversos productos de
        soldadura que estamos explorando. Estos artículos podrían estar
        disponibles para la venta en nuestra página en el futuro. Mantente
        atento a nuestras actualizaciones para no perderte la oportunidad de
        adquirir estos increíbles productos.
      </p>
      <iframe
        class="!aspect-video w-full max-w-7xl h-auto mx-auto mt-2"
        width="560"
        height="315"
        src="https://www.youtube.com/embed/-Z42PYsGOgA?si=ghaWcKPPKkLKZ06V&autoplay=1&mute=1"
        title="YouTube video player"
        frameborder="0"
        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
        referrerpolicy="strict-origin-when-cross-origin"
        allowfullscreen></iframe>
    </section>

    <section
      class="grid gap-12 grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gridXL mt-6"
    >
      {
        PRODUCTS.map((product) => {
          const { id, title, price, images, width, height, description } =
            product;
          return (
            <a id={`${id}`} href={`/store/${id}`} class="card">
              <div class="inner rounded">
                <div class="front">
                  <Image
                    transition:name={`product-${id}`}
                    src={images[0]}
                    alt={title}
                    class="aspect-square size-full object-cover rounded-full animate-spin [animation-duration:100s]"
                    width={width ?? 400}
                    height={height ?? 600}
                  />
                </div>
                <div class="back bg-neutral-200 dark:bg-neutral-900 flex flex-col items-center justify-center px-2">
                  <h5 class="text-xl font-bold">{title}</h5>
                  <p class="text-sm">${price}</p>
                  <p class="text-sm">{description}</p>
                </div>
              </div>
            </a>
          );
        })
      }
    </section>

    <section
      class="mt-36 grid place-items-center justify-center items-center w-full"
    >
      <div class="container mx-auto">
        <div class="cube">
          <div class="front">
            <p class="w-full px-2">
              La programación es el proceso de crear instrucciones que una
              computadora puede seguir para realizar tareas específicas. Se
              utiliza para desarrollar software, aplicaciones y sistemas que
              facilitan diversas actividades en la vida cotidiana.
            </p>
          </div>
          <div class="back">
            <p class="w-full px-2">
              La programación es fundamental en el mundo digital actual. Permite
              automatizar procesos, resolver problemas complejos y crear
              soluciones innovadoras en áreas como la tecnología, la ciencia y
              el arte, impulsando el avance de la sociedad.
            </p>
          </div>
          <div class="right">
            <Image
              src="/images/programming.webp"
              alt="An individual working on a computer, programming with code visible on the monitor."
              class="h-full object-cover"
              loading="eager"
              width={1280}
              height={640}
            />
          </div>
          <div class="left">
            <Image
              src="/images/code_2.png"
              alt="An individual working on a computer, programming with code visible on the monitor."
              class="h-full object-cover"
              loading="eager"
              width={1280}
              height={640}
            />
          </div>
          <div class="top"></div>
          <div class="bottom"></div>
        </div>
      </div>
    </section>

    <section
      class="mt-80 grid place-items-center justify-center items-center w-full"
    >
      <h6 class="text-7xl md:text-8xl lg:text-9xl font-bold just-dont">
        Just Don't
      </h6>
    </section>
  </main>
</Layout>

<style>
  .card {
    width: 100%;
    aspect-ratio: 1 / 1;
    perspective: 1000px;
    --duration: 600ms;
    .inner {
      width: 100%;
      height: 100%;
      position: relative;
      transform-style: preserve-3d;
      transition: transform var(--duration);
      text-align: center;

      .front,
      .back {
        width: 100%;
        height: 100%;
        position: absolute;
        backface-visibility: hidden;
        align-items: center;
      }
      .front {
        overflow: hidden;
      }
      .back {
        transform: rotateY(180deg);
      }
    }
    &:hover .inner {
      transform: rotateY(180deg);
    }
  }

  .container {
    perspective: 500px;
  }

  @property --anim-deg {
    syntax: "<angle>";
    initial-value: 0deg;
    inherits: false;
  }

  .cube {
    --size: 300px;
    width: var(--size);
    height: var(--size);
    position: relative;
    transform-style: preserve-3d;
    animation: rotate-cube var(--s, 10s) infinite linear;
    --anim-deg: 0deg;

    &:hover {
      animation-play-state: paused;
    }

    .front {
      --y: 0deg;
    }
    .back {
      --y: 180deg;
    }
    .left {
      --y: 90deg;
    }
    .right {
      --y: -90deg;
    }
    .top {
      --x: 90deg;
    }
    .bottom {
      --x: -90deg;
    }

    > * {
      align-content: center;
      text-align: center;
      position: absolute;
      width: 100%;
      height: 100%;
      transform: rotateY(var(--y, 0deg)) rotateX(var(--x, 0deg))
        translateZ(var(--z));
      backface-visibility: visible;

      @apply bg-neutral-200 dark:bg-neutral-900 bg-opacity-95 text-sm;

      --z: calc(var(--size) / 2);
    }
  }

  @keyframes rotate-cube {
    from {
      transform: rotateX(0deg) rotateY(0deg);
    }
    to {
      transform: rotateX(var(--anim-deg)) rotateY(360deg);
    }
  }

  .just-dont {
    transform: skewX(-2deg) rotateY(12deg);
    --shadow: light-dark(rgb(180, 22, 183), rgb(177, 222, 151));
    text-shadow:
      0 0 10px var(--shadow),
      0 0 20px var(--shadow),
      0 0 30px var(--shadow)
    ;
  }
</style>
