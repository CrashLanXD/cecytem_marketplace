---
interface Props {
  className?: string;
  fillIcon?: boolean;
}

const { className, fillIcon } = Astro.props;
---

<button id="themeToggle" class:list={[className ?? "size-10 p-1"]}>
  {
    fillIcon ? (
      <svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path class="sun" stroke-linecap="round" stroke-linejoin="round" fill="currentColor" d="M12 3v2.25m6.364.386l-1.591 1.591M21 12h-2.25m-.386 6.364l-1.591-1.591M12 18.75V21m-4.773-4.227l-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0z"></path><path class="moon" stroke-linecap="round" stroke-linejoin="round" fill="currentColor" d="M21.752 15.002A9.718 9.718 0 0118 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 003 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 009.002-5.998z"></path></svg>
    ) : (
      <svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path class="sun" fill="currentColor" fill-rule="evenodd" d="M12 17.5a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11zm0 1.5a7 7 0 1 0 0-14 7 7 0 0 0 0 14zm12-7a.8.8 0 0 1-.8.8h-2.4a.8.8 0 0 1 0-1.6h2.4a.8.8 0 0 1 .8.8zM4 12a.8.8 0 0 1-.8.8H.8a.8.8 0 0 1 0-1.6h2.5a.8.8 0 0 1 .8.8zm16.5-8.5a.8.8 0 0 1 0 1l-1.8 1.8a.8.8 0 0 1-1-1l1.7-1.8a.8.8 0 0 1 1 0zM6.3 17.7a.8.8 0 0 1 0 1l-1.7 1.8a.8.8 0 1 1-1-1l1.7-1.8a.8.8 0 0 1 1 0zM12 0a.8.8 0 0 1 .8.8v2.5a.8.8 0 0 1-1.6 0V.8A.8.8 0 0 1 12 0zm0 20a.8.8 0 0 1 .8.8v2.4a.8.8 0 0 1-1.6 0v-2.4a.8.8 0 0 1 .8-.8zM3.5 3.5a.8.8 0 0 1 1 0l1.8 1.8a.8.8 0 1 1-1 1L3.5 4.6a.8.8 0 0 1 0-1zm14.2 14.2a.8.8 0 0 1 1 0l1.8 1.7a.8.8 0 0 1-1 1l-1.8-1.7a.8.8 0 0 1 0-1z"/><path class="moon" fill="currentColor" fill-rule="evenodd" d="M16.5 6A10.5 10.5 0 0 1 4.7 16.4 8.5 8.5 0 1 0 16.4 4.7l.1 1.3zm-1.7-2a9 9 0 0 1 .2 2 9 9 0 0 1-11 8.8 9.4 9.4 0 0 1-.8-.3c-.4 0-.8.3-.7.7a10 10 0 0 0 .3.8 10 10 0 0 0 9.2 6 10 10 0 0 0 4-19.2 9.7 9.7 0 0 0-.9-.3c-.3-.1-.7.3-.6.7a9 9 0 0 1 .3.8z"/></svg>
    )
  }
  <span class="sr-only">Toggle Theme</span>
</button>

<style>
  .sun { display: block; }
  .moon { display: none; }

  :global(.dark) .sun { display: none; }
  :global(.dark) .moon { display: block; }
</style>

<script>
  import { $ } from "@/lib/dom-selector";
  document.addEventListener('astro:page-load', () => {
    const applyTheme = (theme: string) => {
      const element = document.documentElement;
      if (theme === "dark") {
        element.classList.add("dark");
        window.localStorage.setItem("theme", "dark");
      } else {
        element.classList.remove("dark");
        window.localStorage.setItem("theme", "light");
      }
    }

    const handleToggleClick = () => {
      console.log("click");
      const theme = localStorage.getItem("theme");
      const newTheme = theme === "dark" ? "light" : "dark";
      if (!(document as any).startViewTransition) applyTheme(newTheme);
      else (document as any).startViewTransition(() => applyTheme(newTheme));
    }

    const themeToggle = $("#themeToggle");
    if (themeToggle) themeToggle.onclick = handleToggleClick;
  });
</script>
