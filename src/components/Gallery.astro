---
import { Image } from "astro:assets";
import type { Product } from "@/types/Product";

import ArrowLeft from "./icons/ArrowLeft.astro";

interface Props {
  product: Product;
}

const { product } = Astro.props;
const { images, title, id, width, height } = product;
---

<section>
  <div
    id="product-gallery"
    class={`relative ${
      images.length > 1
        ? "grid grid-rows-1 grid-cols-1 lg:grid-rows-2 lg:grid-cols-3 gap-8 place-items-center"
        : "flex justify-center"
    }`}
  >
    {
      Array.from({ length: images.length }).map((_, idx) => (
        <button
          id={`img-${idx}`}
          class={`gallery-button aspect-square hover:scale-105 transition-transform hover:brightness-125 ${idx === 0 ? "row-span-2 col-span-2 size-80 lg:size-96" : "hidden lg:block row-span-1 col-span-1 size-44"}`}
        >
          <figure>
            <picture>
              <Image
                transition:name={idx === 0 ? `product-${id}` : ""}
                src={images[idx]}
                alt={`Galeria de fotos de ${title}`}
                loading="eager"
                class={`rounded-md aspect-square object-cover size-full`}
                width={width ?? 400}
                height={height ?? 600}
              />
            </picture>
          </figure>
        </button>
      ))
    }
    <span
      class="absolute md:hidden bottom-2 right-2 text-sm text-white rounded-lg bg-black/60 opacity-85 px-2"
      >1 / {images.length}</span
    >
  </div>
  <dialog
    id="galleryDialog"
    class:list={[
      "backdrop:bg-black/50 backdrop:backdrop-blur-sm",
      "bg-transparent size-full",
      "gap-8 text-white overflow-hidden",
    ]}
  >
    <div
      class="size-full flex flex-col gap-y-5 gap-x-8 md:flex-row items-center justify-center"
    >
      <button
        id="closeBtn"
        class:list={[
          "absolute top-8 right-8",
          "flex items-center justify-center",
          "text-5xl p-4 rounded aspect-square",
          "bg-black/60 transition",
          "hover:scale-110 hover:text-black hover:bg-indigo-100 dark:hover:bg-indigo-800",
        ]}>&times;</button
      >
      {
        images.length > 1 && (
          <button
            id="btnPrev"
            class:list={[
              "block group transition-transform hover:scale-125",
              "order-2 md:order-none",
            ]}
          >
            <ArrowLeft class="size-16 opacity-85 group-hover:opacity-100" />
          </button>
        )
      }
      <div
        id="imageContainer"
        class:list={[
          "max-h-[92dvh] max-w-screen-sm 2xl:max-w-full",
          "flex justify-center",
        ]}
      >
        {
          Array.from({ length: images.length }).map((_, idx) => (
            <Image
              src={images[idx]}
              alt={`Imagen de la galeria de fotos de ${title}`}
              width={width ?? 400}
              height={height ?? 600}
              class={"object-contain rounded-md order-1 md:order-none"}
            />
          ))
        }
      </div>
      {
        images.length > 1 && (
          <button
            id="btnNext"
            class:list={[
              "block group transition-transform hover:scale-125",
              "order-3 md:order-none",
            ]}
          >
            <ArrowLeft class="size-16 rotate-180 opacity-85 group-hover:opacity-100" />
          </button>
        )
      }
    </div>
  </dialog>
</section>

<style>
  :root {
    --duration: 150ms;
  }

  #galleryDialog {
    transition:
      opacity var(--duration) ease,
      display var(--duration) ease allow-discrete;
    opacity: 0;

    &[open] {
      opacity: 1;
      transition: opacity var(--duration) ease;

      @starting-style {
        opacity: 0;
      }
    }
  }
</style>

<script>
  import { $, $$ } from "@/lib/dom-selector";

  document.addEventListener("astro:page-load", () => {
    const dialog = $("#galleryDialog") as HTMLDialogElement;
    const closeBtn = $("#closeBtn") as HTMLButtonElement;
    const prevBtn = $("#btnPrev");
    const nextBtn = $("#btnNext");

    const galleryButtons = $$(".gallery-button");
    const images = $$("#imageContainer img");

    let currentImgIdx = 0;

    function open() {
      dialog.showModal();
    }

    function close() {
      dialog.close();
    }

    function main() {
      galleryButtons.forEach((button) => {
        button.addEventListener("click", (e) => {
          const buttonId = (e.currentTarget as HTMLElement).id;
          currentImgIdx = parseInt(buttonId.replace("img-", ""), 10);
          open();
          showImage(currentImgIdx);
        });
      });

      closeBtn.addEventListener("click", close);

      dialog.addEventListener("click", (e) => {
        if (e.target === dialog) close();
      });

      prevBtn?.addEventListener("click", showPrevImg);
      nextBtn?.addEventListener("click", showNextImg);
    }

    function showImage(index: number) {
      images.forEach((img, idx) => {
        img.classList.toggle("hidden", idx !== index);
      });
    }

    function showPrevImg() {
      currentImgIdx = (currentImgIdx - 1 + images.length) % images.length;
      showImage(currentImgIdx);
    }

    function showNextImg() {
      currentImgIdx = (currentImgIdx + 1) % images.length;
      showImage(currentImgIdx);
    }

    document.addEventListener("keydown", (e) => {
      const { key } = e;
      if (!dialog.open) return;
      if (key === "ArrowRight") showNextImg();
      if (key === "ArrowLeft") showPrevImg();
    });

    main();
  });
</script>
