---
import CodeIcon from "@/components/icons/CodeIcon.astro";
import StoreIcon from "@/components/icons/StoreIcon.astro";
import TeamIcon from "@/components/icons/TeamIcon.astro";
import FlagIcon from "@/components/icons/FlagIcon.astro";
import MailIcon from "@/components/icons/MailIcon.astro";

import PlusIcon from "@/icons/PlusIcon.astro";
import MenuIcon from "@/icons/MenuIcon.astro";

const links = [
  { href: "/", name: "Inicio", icon: FlagIcon },
  { href: "/team", name: "Equipo", icon: TeamIcon },
  { href: "/store", name: "Tienda", icon: StoreIcon },
  { href: "/dev", name: "CÃ³digo", icon: CodeIcon },
  { href: "/contact", name: "Contacto", icon: MailIcon },
];
---

<nav
  class="block px-8 py-4 w-full max-w-full bg-transparent text-neutral-900 dark:text-neutral-50"
>
  <div class="container mx-auto flex items-center justify-between">
    <p class="block antialiased leading-relaxed uppercase tracking-widest">
      cecytem marketplace
    </p>
    <ul
      id="nav-menu"
      class="ml-10 hidden items-center gap-6 lg:flex [&>li]:px-2 [&>li]:py-1 [&>li]:rounded-md"
    >
      {
        links.map(({ href, name, icon: IconComponent }) => (
          <li class="nav-item" data-page={href.toLowerCase()}>
            <a
              href={href}
              class="antialiased text-base leading-relaxed flex items-center gap-2 font-medium"
            >
              <IconComponent class="size-5" /> {name}
            </a>
          </li>
        ))
      }
    </ul>
    <button
      class:list={[
        "relative ml-auto lg:hidden",
        "inline-flex items-center justify-center",
        "size-10 rounded-lg transition-all",
        "text-neutral-900 dark:text-neutral-100",
        "hover:bg-neutral-900/10 dark:hover:bg-neutral-50/10",
        "active:scale-95 hover:scale-105",
      ]}
      id="showBtn"
    >
      <MenuIcon class="size-6" />
    </button>
  </div>
</nav>

<dialog
  id="mobileMenu"
  class:list={[
    "bg-transparent size-full origin-bottom",
    "grid place-items-center overflow-x-hidden",
  ]}
>
  <button
    class:list={[
      "absolute z-20 right-2 top-2 inline-flex items-center justify-center",
      "transition-all rounded-xl outline-none focus:outline-green-500",
      "text-neutral-900 dark:text-neutral-100",
      "active:scale-95 hover:scale-105",
    ]}
    type="button"
    id="closeBtn"
    data-ripple-dark="true"
    data-collapse-target="navbar"
  >
    <PlusIcon style="stroke-width: 2;" class="size-12 rotate-45" />
  </button>
  <ul
    data-collapse="navbar"
    class:list={[
      "absolute inset-0",
      "w-full h-full flex flex-col justify-center",
      "rounded-xl p-6",
      "bg-transparent",
    ]}
  >
    {
      links.map(({ href, name, icon: IconComponent }, idx) => (
        <li class="li" style={`--duration:${1100 + (idx + 1) * 200}ms;`}>
          <a
            href={href}
            class="group text-5xl inline-flex items-center gap-2 py-4 font-medium transition-transform"
          >
            <IconComponent class="size-12 select-none" />
            <span class="inline-block group-hover:underline">
              {name}
            </span>
          </a>
        </li>
      ))
    }
  </ul>
</dialog>

<div
  id="nav-backdrop"
  class:list={[
    "absolute inset-0",
    "opacity-0 pointer-events-none",
    "transition-all duration-300 ease-in-out",
    "bg-neutral-950/50 dark:bg-neutral-300/50",
    "backdrop-blur-lg rounded-lg",
    "translate-x-[var(--left)] translate-y-[16px] w-[var(--width)] h-[var(--height)]",
  ]}
>
</div>

<style>
  :root {
    --duration: 300ms;
    --timing-function: ease-in-out;
  }

  #mobileMenu {
    transition:
      scale var(--duration) ease,
      display var(--duration) var(--timing-function) allow-discrete;
    scale: 0;
    translate: 0px -200px;

    .li {
      opacity: 0;
      translate: 0px 60px;
      transition-property: translate, opacity;
      transition-duration: 300ms;
    }

    &[open] {
      transition:
        scale var(--duration) var(--timing-function),
        translate var(--duration) ease;
      scale: 1;
      translate: 0px 0px;

      .li {
        transition-duration: var(--duration);
        opacity: 1;
        translate: 0px 0px;
      }

      @starting-style {
        scale: 0;
        translate: 0px -200px;

        .li {
          opacity: 0;
          translate: 0px 20px;
        }
      }
    }

    &::backdrop {
      @apply bg-gradient-to-r from-neutral-100 to-neutral-300 dark:from-neutral-900 dark:to-neutral-950;
    }
  }
</style>

<script>
  import { $, $$ } from "@/lib/dom-selector";

  function main() {
    addHoverEffect();
    addMobileMenu();
  }

  function addMobileMenu() {
    const showBtn = $("#showBtn") as HTMLButtonElement;
    const closeBtn = $("#closeBtn") as HTMLButtonElement;
    const dialog = $("#mobileMenu") as HTMLDialogElement;

    showBtn.addEventListener("click", () => {
      dialog.showModal();
    });

    closeBtn.addEventListener("click", () => {
      dialog.close();
    });
  }

  function addHoverEffect() {
    const $listItems = $$("#nav-menu li");
    const $navBackdrop = $("#nav-backdrop");

    if (!($listItems && $navBackdrop)) return;

    $listItems.forEach((item) => {
      item.addEventListener("mouseenter", () => {
        const { left, top, width, height } = item.getBoundingClientRect();

        $navBackdrop.style.setProperty("--left", `${left - 4}px`);
        $navBackdrop.style.setProperty("--top", `${top}px`);
        $navBackdrop.style.setProperty("--width", `${width + 8}px`);
        $navBackdrop.style.setProperty("--height", `${height}px`);

        $navBackdrop.style.opacity = "0.2";
        $navBackdrop.style.visibility = "visible";
      });

      item.addEventListener("mouseleave", () => {
        $navBackdrop.style.opacity = "0";
        $navBackdrop.style.visibility = "hidden";
      });
    });

    // add underline to current page
    const currentPath = window.location.pathname;
    const navItems = $$(".nav-item");
    navItems.forEach((item) => {
      const path = item.getAttribute("data-page");
      if (currentPath === path) item.classList.add("underline");
    });
  }

  document.addEventListener("astro:page-load", main);
</script>
